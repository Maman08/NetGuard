import React, { useState } from 'react';
import { Search, AlertCircle, CheckCircle, Clock, Shield, Server, Globe, Wifi, Loader2 } from 'lucide-react';
import { ScanResult, Vulnerability } from '../types';

const mockScanResults: ScanResult[] = [

];

export function VulnerabilityScanner() {
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [selectedScan, setSelectedScan] = useState<ScanResult | null>(mockScanResults[0]);

const startScan=async()=>{
  if(!url){
    return;
  }
  setIsScanning(true);
  setScanProgress(12);
  const response=await fetch('http://localhost:8000/scan/',{
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body:JSON.stringify({url})
});
  const data=await response.json();
  console.log('scan started',data);
  pollingScanStatus;
}
const pollingScanStatus=async(selectedScan: any)=>{
  const interval=setInterval(async()=>{
    const response=await fetch(`http://localhost:8000/scan_status/?scan_id=${selectedScan}`);
    const data=await response.json();
    if(data.status=="completed"){
      console.log("scan completed ",data);
      setScanProgress(99);
      clearInterval(interval)
    }else {
      console.log("Scan in progress...");
  }
  },5000)
     
}

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'text-red-500 border-red-500/20 bg-red-500/10';
      case 'high':
        return 'text-orange-500 border-orange-500/20 bg-orange-500/10';
      case 'medium':
        return 'text-yellow-500 border-yellow-500/20 bg-yellow-500/10';
      case 'low':
        return 'text-blue-500 border-blue-500/20 bg-blue-500/10';
      default:
        return 'text-gray-500 border-gray-500/20 bg-gray-500/10';
    }
  };

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-500 mb-8">
        Vulnerability Scanner
      </h1>

      {/* Scan Input */}
      <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card mb-6">
        <h2 className="text-xl font-semibold text-gray-100 mb-4">New Scan</h2>
        <div className="flex space-x-4">
          <input
            type="text"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="Enter website URL"
            disabled={isScanning}
            className="flex-1 bg-black/50 text-gray-100 rounded-lg px-4 py-2 border border-gray-800/50 focus:outline-none focus:ring-2 focus:ring-cyan-500/50 transition-all duration-300 disabled:opacity-50"
            style={{ zIndex: 10 }}
          />
          <button 
            onClick={startScan}
            disabled={!url || isScanning}
            className="px-6 py-2 bg-cyan-500/10 text-cyan-400 rounded-lg transition-all duration-300 btn-glow flex items-center space-x-2 hover:bg-cyan-500/20 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isScanning ? (
              <Loader2 className="w-5 h-5 animate-spin" />
            ) : (
              <Search className="w-5 h-5" />
            )}
            <span>{isScanning ? 'Scanning...' : 'Scan Now'}</span>
          </button>
        </div>

        {/* Scanning Progress */}
        {isScanning && (
          <div className="mt-6 space-y-4">
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-400">Scan in progress...</span>
              <span className="text-cyan-400">{scanProgress}%</span>
            </div>
            <div className="w-full h-2 bg-black/50 rounded-full overflow-hidden">
              <div 
                className="h-full bg-gradient-to-r from-cyan-500 to-blue-500 transition-all duration-300"
                style={{ width: `${scanProgress}%` }}
              />
            </div>
            <p className="text-gray-400 text-sm animate-pulse">
              Please wait while we analyze the target. This might take several minutes...
            </p>
          </div>
        )}
      </div>

      {selectedScan && !isScanning && (
        <>
          {/* Target Information */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
              <h2 className="text-xl font-semibold text-gray-100 mb-4">Target Information</h2>
              <div className="grid grid-cols-2 gap-4">
                <InfoCard
                  icon={<Globe className="w-5 h-5" />}
                  label="Hostname"
                  value={selectedScan.targetInfo.hostname}
                />
                <InfoCard
                  icon={<Wifi className="w-5 h-5" />}
                  label="IP Address"
                  value={selectedScan.targetInfo.ip}
                />
                <InfoCard
                  icon={<Shield className="w-5 h-5" />}
                  label="Port"
                  value={selectedScan.targetInfo.port}
                />
                <InfoCard
                  icon={<Server className="w-5 h-5" />}
                  label="Server"
                  value={selectedScan.targetInfo.server}
                />
              </div>
            </div>

            <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
              <h2 className="text-xl font-semibold text-gray-100 mb-4">Scan Timing</h2>
              <div className="space-y-4">
                <div className="flex justify-between items-center p-4 bg-black/50 rounded-lg border border-gray-800/50">
                  <div className="text-gray-400">Start Time</div>
                  <div className="text-gray-100">{selectedScan.timing.startTime}</div>
                </div>
                <div className="flex justify-between items-center p-4 bg-black/50 rounded-lg border border-gray-800/50">
                  <div className="text-gray-400">End Time</div>
                  <div className="text-gray-100">{selectedScan.timing.endTime}</div>
                </div>
                <div className="flex justify-between items-center p-4 bg-black/50 rounded-lg border border-gray-800/50">
                  <div className="text-gray-400">Duration</div>
                  <div className="text-gray-100">{selectedScan.timing.duration}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Scan Summary */}
          <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card mb-6">
            <h2 className="text-xl font-semibold text-gray-100 mb-4">Scan Summary</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50">
                <div className="text-2xl font-bold text-red-400 mb-2">{selectedScan.summary.totalErrors}</div>
                <div className="text-gray-400">Total Errors</div>
              </div>
              <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50">
                <div className="text-2xl font-bold text-yellow-400 mb-2">{selectedScan.summary.totalIssues}</div>
                <div className="text-gray-400">Issues Reported</div>
              </div>
              <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50">
                <div className="text-2xl font-bold text-green-400 mb-2">
                  {selectedScan.summary.isSuccessful ? 'Yes' : 'No'}
                </div>
                <div className="text-gray-400">Scan Successful</div>
              </div>
            </div>
          </div>

          {/* Vulnerability Details */}
          <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
            <h2 className="text-xl font-semibold text-gray-100 mb-4">Vulnerability Details</h2>
            <div className="space-y-4">
              {selectedScan.vulnerabilities.map((vuln) => (
                <div 
                  key={vuln.id} 
                  className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-red-500/30"
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <span className={`px-2 py-1 rounded text-sm border ${getSeverityColor(vuln.severity)}`}>
                        {vuln.severity}
                      </span>
                      <h3 className="text-gray-100 font-medium">{vuln.type}</h3>
                    </div>
                    <span className="text-gray-400 text-sm">{vuln.timestamp}</span>
                  </div>
                  <p className="text-gray-300 mb-2">{vuln.description}</p>
                  {vuln.recommendation && (
                    <div className="bg-gray-900/30 p-4 rounded-lg border border-gray-800/50">
                      <h4 className="text-gray-100 font-medium mb-1">Recommendation:</h4>
                      <p className="text-gray-400">{vuln.recommendation}</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </>
      )}
    </div>
  );
}

function InfoCard({ icon, label, value }: {
  icon: React.ReactNode;
  label: string;
  value: string;
}) {
  return (
    <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-cyan-500/30">
      <div className="flex items-center space-x-3 mb-2">
        <div className="text-cyan-400">{icon}</div>
        <span className="text-gray-400 text-sm">{label}</span>
      </div>
      <p className="text-lg font-semibold text-transparent bg-clip-text bg-gradient-to-r from-gray-100 to-gray-300">
        {value}
      </p>
    </div>
  );
}