import React, { useState } from 'react';
import { Search, AlertCircle, CheckCircle, Clock } from 'lucide-react';
import { ScanResult } from '../types';
import axios,{ AxiosResponse } from 'axios';
const mockScanResults: ScanResult[] = [
  {
    id: '1',
    url: 'https://example.com',
    timestamp: '2024-02-28 14:30:00',
    status: 'completed',
    vulnerabilities: [
      {
        id: 'vuln-1',
        type: 'SQL Injection',
        severity: 'high',
        description: 'Potential SQL injection vulnerability in login form',
        recommendation: 'Implement proper input validation and parameterized queries',
        timestamp: '2024-02-28 14:30:00',
        status: 'open'
      }
    ]
  }
];

export function VulnerabilityScanner() {
  const [url, setUrl] =useState<string>('');
  const [response,setResponse]=useState<string>('')
  const handleScan=async()=>{
     try{
      const result:AxiosResponse<ScanResult>=await axios.post('http://localhost:8000/scan',null,{
        params:{url},
       })
       setResponse(result.data);

     }catch(e:any){
      setResponse("Error: "+e.message);
     }
  }
  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-500 mb-8">
        Vulnerability Scanner
      </h1>

      <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card mb-6">
        <h2 className="text-xl font-semibold text-gray-100 mb-4">New Scan</h2>
        <div className="flex space-x-4">
          <input
            type="text"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="Enter website URL"
            className="flex-1 bg-black/50 text-gray-100 rounded-lg px-4 py-2 border border-gray-800/50 focus:outline-none focus:ring-2 focus:ring-cyan-500/50 transition-all duration-300"
          />
          <button className="px-6 py-2 bg-cyan-500/10 text-cyan-400 rounded-lg transition-all duration-300 btn-glow flex items-center space-x-2 hover:bg-cyan-500/20" 
          onClick={handleScan}>
            <Search className="w-5 h-5" />
            <span>Scan Now</span>
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
          <h2 className="text-xl font-semibold text-gray-100 mb-4">Vulnerability Summary</h2>
          <div className="grid grid-cols-3 gap-4">
            <SeverityCard
              severity="high"
              count={2}
              icon={<AlertCircle className="w-5 h-5" />}
            />
            <SeverityCard
              severity="medium"
              count={3}
              icon={<Clock className="w-5 h-5" />}
            />
            <SeverityCard
              severity="low"
              count={5}
              icon={<CheckCircle className="w-5 h-5" />}
            />
          </div>
        </div>

        <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
          <h2 className="text-xl font-semibold text-gray-100 mb-4">Scan History</h2>
          <div className="space-y-4">
            {mockScanResults.map((scan) => (
              <div key={scan.id} className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-cyan-500/30">
                <div className="flex justify-between items-start mb-2">
                  <div>
                    <h3 className="text-gray-100 font-medium">{scan.url}</h3>
                    <p className="text-gray-400 text-sm">{scan.timestamp}</p>
                  </div>
                  <span className="px-3 py-1 bg-green-900/50 text-green-400 rounded-full text-sm border border-green-500/20">
                    {scan.status}
                  </span>
                </div>
                <p className="text-gray-400 text-sm">
                  {scan.vulnerabilities.length} vulnerabilities found
                </p>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
        <h2 className="text-xl font-semibold text-gray-100 mb-4">Detailed Results</h2>
        <div className="space-y-4">
          {mockScanResults[0].vulnerabilities.map((vuln) => (
            <div key={vuln.id} className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-red-500/30">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center space-x-3">
                  <span className={`px-2 py-1 rounded text-sm ${
                    vuln.severity === 'high' ? 'bg-red-500/10 text-red-400 border border-red-500/20' :
                    vuln.severity === 'medium' ? 'bg-yellow-500/10 text-yellow-400 border border-yellow-500/20' :
                    'bg-blue-500/10 text-blue-400 border border-blue-500/20'
                  }`}>
                    {vuln.severity}
                  </span>
                  <h3 className="text-gray-100 font-medium">{vuln.type}</h3>
                </div>
                <span className="text-gray-400 text-sm">{vuln.timestamp}</span>
              </div>
              <p className="text-gray-300 mb-2">{vuln.description}</p>
              <div className="bg-gray-900/30 p-4 rounded-lg border border-gray-800/50">
                <h4 className="text-gray-100 font-medium mb-1">Recommendation:</h4>
                <p className="text-gray-400">{vuln.recommendation}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

function SeverityCard({ severity, count, icon }: {
  severity: string;
  count: number;
  icon: React.ReactNode;
}) {
  return (
    <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-cyan-500/30">
      <div className="flex items-center space-x-2 mb-2">
        <div className={`${
          severity === 'high' ? 'text-red-400' :
          severity === 'medium' ? 'text-yellow-400' :
          'text-blue-400'
        }`}>
          {icon}
        </div>
        <span className="text-gray-400 capitalize">{severity}</span>
      </div>
      <p className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-gray-100 to-gray-300">{count}</p>
    </div>
  );
}