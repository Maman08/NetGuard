// import React, { useState } from 'react';
// import { Search, AlertCircle, CheckCircle, Clock, Shield, Server, Globe, Wifi, Loader2 } from 'lucide-react';
// import { ScanResult, Vulnerability } from '../types';

// const mockScanResults: ScanResult[] = [
//   {
//     id: '1',
//     url: 'https://twitter-quote-six.vercel.app',
//     targetInfo: {
//       ip: '216.198.79.193',
//       hostname: 'twitter-quote-six.vercel.app',
//       port: '443 - HTTPS',
//       server: 'Vercel'
//     },
//     timing: {
//       startTime: '2025-02-02 13:16:29',
//       endTime: '2025-02-02 13:29:56',
//       duration: 807
//     },
//     status: 'completed',
//     summary: {
//       totalErrors: 15,
//       totalIssues: 2,
//       isSuccessful: true
//     },
//     vulnerabilities: [
//       {
//         id: 'vuln-1',
//         type: 'Missing Security Headers',
//         severity: 'high',
//         description: 'X-Frame-Options header is not set. This can lead to clickjacking attacks.',
//         recommendation: 'Set X-Frame-Options header to DENY or SAMEORIGIN',
//         timestamp: '2025-02-02 13:29:56',
//         status: 'open'
//       },
//       {
//         id: 'vuln-2',
//         type: 'Unusual Refresh Header',
//         severity: 'medium',
//         description: 'Unusual refresh header detected which might indicate potential security issues.',
//         recommendation: 'Review and remove unnecessary refresh headers',
//         timestamp: '2025-02-02 13:29:56',
//         status: 'open'
//       }
//     ]
//   }
// ];

// export function VulnerabilityScanner() {
//   const [url, setUrl] = useState('');
//   const [isScanning, setIsScanning] = useState(false);
//   const [scanProgress, setScanProgress] = useState(0);
//   const [selectedScan, setSelectedScan] = useState<ScanResult>(mockScanResults[0]);

//   const startScan = () => {
//     if (!url) return;
//     setIsScanning(true);
//     setScanProgress(0);
    
//     // Simulate scan progress
//     const interval = setInterval(() => {
//       setScanProgress(prev => {
//         if (prev >= 100) {
//           clearInterval(interval);
//           setIsScanning(false);
//           return 100;
//         }
//         return prev + 1;
//       });
//     }, 300); // Adjust timing as needed
//   };

//   const getSeverityColor = (severity: string) => {
//     switch (severity) {
//       case 'critical':
//         return 'text-red-500 border-red-500/20 bg-red-500/10';
//       case 'high':
//         return 'text-orange-500 border-orange-500/20 bg-orange-500/10';
//       case 'medium':
//         return 'text-yellow-500 border-yellow-500/20 bg-yellow-500/10';
//       case 'low':
//         return 'text-blue-500 border-blue-500/20 bg-blue-500/10';
//       default:
//         return 'text-gray-500 border-gray-500/20 bg-gray-500/10';
//     }
//   };

//   return (
//     <div className="p-8">
//       <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-500 mb-8">
//         Vulnerability Scanner
//       </h1>

//       {/* Scan Input */}
//       <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card mb-6">
//         <h2 className="text-xl font-semibold text-gray-100 mb-4">New Scan</h2>
//         <div className="flex space-x-4">
//         <input
//             type="url"
//             value={url}
//             onChange={(e) => setUrl(e.target.value)}
//             placeholder="Enter website URL"
//             className="flex-1 bg-black/50 text-gray-100 rounded-lg px-4 py-2 border border-gray-800/50 focus:outline-none focus:ring-2 focus:ring-cyan-500/50 transition-all duration-300"
//           />
//           <button 
//             onClick={startScan}
//             disabled={!url || isScanning}
//             className="px-6 py-2 bg-cyan-500/10 text-cyan-400 rounded-lg transition-all duration-300 btn-glow flex items-center space-x-2 hover:bg-cyan-500/20 disabled:opacity-50 disabled:cursor-not-allowed"
//           >
//             {isScanning ? (
//               <Loader2 className="w-5 h-5 animate-spin" />
//             ) : (
//               <Search className="w-5 h-5" />
//             )}
//             <span>{isScanning ? 'Scanning...' : 'Scan Now'}</span>
//           </button>
//         </div>

//         {/* Scanning Progress */}
//         {isScanning && (
//           <div className="mt-6 space-y-4">
//             <div className="flex items-center justify-between text-sm">
//               <span className="text-gray-400">Scan in progress...</span>
//               <span className="text-cyan-400">{scanProgress}%</span>
//             </div>
//             <div className="w-full h-2 bg-black/50 rounded-full overflow-hidden">
//               <div 
//                 className="h-full bg-gradient-to-r from-cyan-500 to-blue-500 transition-all duration-300"
//                 style={{ width: `${scanProgress}%` }}
//               />
//             </div>
//             <p className="text-gray-400 text-sm animate-pulse">
//               Please wait while we analyze the target. This might take several minutes...
//             </p>
//           </div>
//         )}
//       </div>

//       {!isScanning && (
//         <>
//           {/* Target Information */}
//           <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
//             <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
//               <h2 className="text-xl font-semibold text-gray-100 mb-4">Target Information</h2>
//               <div className="grid grid-cols-2 gap-4">
//                 <InfoCard
//                   icon={<Globe className="w-5 h-5" />}
//                   label="Hostname"
//                   value={selectedScan.targetInfo.hostname}
//                 />
//                 <InfoCard
//                   icon={<Wifi className="w-5 h-5" />}
//                   label="IP Address"
//                   value={selectedScan.targetInfo.ip}
//                 />
//                 <InfoCard
//                   icon={<Shield className="w-5 h-5" />}
//                   label="Port"
//                   value={selectedScan.targetInfo.port}
//                 />
//                 <InfoCard
//                   icon={<Server className="w-5 h-5" />}
//                   label="Server"
//                   value={selectedScan.targetInfo.server}
//                 />
//               </div>
//             </div>

//             <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
//               <h2 className="text-xl font-semibold text-gray-100 mb-4">Scan Timing</h2>
//               <div className="space-y-4">
//                 <div className="flex justify-between items-center p-4 bg-black/50 rounded-lg border border-gray-800/50">
//                   <div className="text-gray-400">Start Time</div>
//                   <div className="text-gray-100">{selectedScan.timing.startTime}</div>
//                 </div>
//                 <div className="flex justify-between items-center p-4 bg-black/50 rounded-lg border border-gray-800/50">
//                   <div className="text-gray-400">End Time</div>
//                   <div className="text-gray-100">{selectedScan.timing.endTime}</div>
//                 </div>
//                 <div className="flex justify-between items-center p-4 bg-black/50 rounded-lg border border-gray-800/50">
//                   <div className="text-gray-400">Duration</div>
//                   <div className="text-gray-100">{selectedScan.timing.duration} seconds</div>
//                 </div>
//               </div>
//             </div>
//           </div>

//           {/* Scan Summary */}
//           <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card mb-6">
//             <h2 className="text-xl font-semibold text-gray-100 mb-4">Scan Summary</h2>
//             <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
//               <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50">
//                 <div className="text-2xl font-bold text-red-400 mb-2">{selectedScan.summary.totalErrors}</div>
//                 <div className="text-gray-400">Total Errors</div>
//               </div>
//               <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50">
//                 <div className="text-2xl font-bold text-yellow-400 mb-2">{selectedScan.summary.totalIssues}</div>
//                 <div className="text-gray-400">Issues Reported</div>
//               </div>
//               <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50">
//                 <div className="text-2xl font-bold text-green-400 mb-2">
//                   {selectedScan.summary.isSuccessful ? 'Yes' : 'No'}
//                 </div>
//                 <div className="text-gray-400">Scan Successful</div>
//               </div>
//             </div>
//           </div>

//           {/* Vulnerability Details */}
//           <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
//             <h2 className="text-xl font-semibold text-gray-100 mb-4">Vulnerability Details</h2>
//             <div className="space-y-4">
//               {selectedScan.vulnerabilities.map((vuln) => (
//                 <div 
//                   key={vuln.id} 
//                   className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-red-500/30"
//                 >
//                   <div className="flex items-start justify-between mb-3">
//                     <div className="flex items-center space-x-3">
//                       <span className={`px-2 py-1 rounded text-sm border ${getSeverityColor(vuln.severity)}`}>
//                         {vuln.severity}
//                       </span>
//                       <h3 className="text-gray-100 font-medium">{vuln.type}</h3>
//                     </div>
//                     <span className="text-gray-400 text-sm">{vuln.timestamp}</span>
//                   </div>
//                   <p className="text-gray-300 mb-2">{vuln.description}</p>
//                   <div className="bg-gray-900/30 p-4 rounded-lg border border-gray-800/50">
//                     <h4 className="text-gray-100 font-medium mb-1">Recommendation:</h4>
//                     <p className="text-gray-400">{vuln.recommendation}</p>
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>
//         </>
//       )}
//     </div>
//   );
// }

// function InfoCard({ icon, label, value }: {
//   icon: React.ReactNode;
//   label: string;
//   value: string;
// }) {
//   return (
//     <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-cyan-500/30">
//       <div className="flex items-center space-x-3 mb-2">
//         <div className="text-cyan-400">{icon}</div>
//         <span className="text-gray-400 text-sm">{label}</span>
//       </div>
//       <p className="text-lg font-semibold text-transparent bg-clip-text bg-gradient-to-r from-gray-100 to-gray-300">
//         {value}
//       </p>
//     </div>
//   );
// }







import React, { useState } from 'react';
import { Search, AlertCircle, CheckCircle, Clock, Shield, Server, Globe, Wifi, Loader2 } from 'lucide-react';

// Types
interface TargetInfo {
  ip: string;
  hostname: string;
  port: string;
  server: string;
}

interface Timing {
  startTime: string;
  endTime: string;
  duration: number;
}

interface Summary {
  totalErrors: number;
  totalIssues: number;
  isSuccessful: boolean;
}

interface Vulnerability {
  id: string;
  type: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  description: string;
  recommendation: string;
  timestamp: string;
  status: 'open' | 'closed';
}

interface ScanResult {
  id: string;
  url: string;
  targetInfo: TargetInfo;
  timing: Timing;
  status: string;
  summary: Summary;
  vulnerabilities: Vulnerability[];
}

// Mock Data
const mockScanResults: ScanResult[] = [
  {
    id: '1',
    url: 'https://example.com',
    targetInfo: {
      ip: '216.198.79.193',
      hostname: 'example.com',
      port: '443 - HTTPS',
      server: 'Apache'
    },
    timing: {
      startTime: '2025-02-02 13:16:29',
      endTime: '2025-02-02 13:29:56',
      duration: 807
    },
    status: 'completed',
    summary: {
      totalErrors: 15,
      totalIssues: 2,
      isSuccessful: true
    },
    vulnerabilities: [
      {
        id: 'vuln-1',
        type: 'Missing Security Headers',
        severity: 'high',
        description: 'X-Frame-Options header is not set. This can lead to clickjacking attacks.',
        recommendation: 'Set X-Frame-Options header to DENY or SAMEORIGIN',
        timestamp: '2025-02-02 13:29:56',
        status: 'open'
      },
      {
        id: 'vuln-2',
        type: 'Unusual Refresh Header',
        severity: 'medium',
        description: 'Unusual refresh header detected which might indicate potential security issues.',
        recommendation: 'Review and remove unnecessary refresh headers',
        timestamp: '2025-02-02 13:29:56',
        status: 'open'
      }
    ]
  }
];

// Helper Components
interface InfoCardProps {
  icon: React.ReactNode;
  label: string;
  value: string;
}

function InfoCard({ icon, label, value }: InfoCardProps) {
  return (
    <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-cyan-500/30">
      <div className="flex items-center space-x-3 mb-2">
        <div className="text-cyan-400">{icon}</div>
        <span className="text-gray-400 text-sm">{label}</span>
      </div>
      <p className="text-lg font-semibold text-gray-100">
        {value}
      </p>
    </div>
  );
}

// Main Component
export function VulnerabilityScanner() {
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [selectedScan, setSelectedScan] = useState<ScanResult | null>(null);
  const [error, setError] = useState('');

  const validateUrl = (url: string) => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  const startScan = () => {
    if (!url) {
      setError('Please enter a URL');
      return;
    }

    if (!validateUrl(url)) {
      setError('Please enter a valid URL (e.g., https://example.com)');
      return;
    }

    setError('');
    setIsScanning(true);
    setScanProgress(0);
    
    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          setSelectedScan(mockScanResults[0]);
          return 100;
        }
        return prev + 1;
      });
    }, 100);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'text-red-500 border-red-500/20 bg-red-500/10';
      case 'high':
        return 'text-orange-500 border-orange-500/20 bg-orange-500/10';
      case 'medium':
        return 'text-yellow-500 border-yellow-500/20 bg-yellow-500/10';
      case 'low':
        return 'text-blue-500 border-blue-500/20 bg-blue-500/10';
      default:
        return 'text-gray-500 border-gray-500/20 bg-gray-500/10';
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 p-8">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-500 mb-8">
          Vulnerability Scanner
        </h1>

        {/* URL Input Section */}
        <div className="bg-gray-800 rounded-xl p-6 shadow-xl mb-8">
          <div className="flex flex-col space-y-4">
            <div className="flex space-x-4">
              <input
                type="url"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                placeholder="Enter website URL (e.g., https://example.com)"
                className="flex-1 bg-gray-900 text-gray-100 rounded-lg px-4 py-2 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              />
              <button 
                onClick={startScan}
                disabled={!url || isScanning}
                className="px-6 py-2 bg-cyan-500 text-white rounded-lg hover:bg-cyan-600 disabled:bg-gray-700 disabled:cursor-not-allowed flex items-center space-x-2"
              >
                {isScanning ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  <Search className="w-5 h-5" />
                )}
                <span>{isScanning ? 'Scanning...' : 'Scan Now'}</span>
              </button>
            </div>
            {error && (
              <p className="text-red-400 text-sm">{error}</p>
            )}
          </div>

          {/* Progress Bar */}
          {isScanning && (
            <div className="mt-6 space-y-4">
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Scan in progress...</span>
                <span className="text-cyan-400">{scanProgress}%</span>
              </div>
              <div className="w-full h-2 bg-gray-900 rounded-full">
                <div 
                  className="h-full bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full transition-all duration-300"
                  style={{ width: `${scanProgress}%` }}
                />
              </div>
            </div>
          )}
        </div>

        {/* Results Section */}
        {selectedScan && !isScanning && (
          <div className="space-y-6">
            {/* Target Information */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-gray-800 rounded-xl p-6 shadow-xl">
                <h2 className="text-xl font-semibold mb-4">Target Information</h2>
                <div className="grid grid-cols-2 gap-4">
                  <InfoCard
                    icon={<Globe className="w-5 h-5" />}
                    label="Hostname"
                    value={selectedScan.targetInfo.hostname}
                  />
                  <InfoCard
                    icon={<Wifi className="w-5 h-5" />}
                    label="IP Address"
                    value={selectedScan.targetInfo.ip}
                  />
                  <InfoCard
                    icon={<Shield className="w-5 h-5" />}
                    label="Port"
                    value={selectedScan.targetInfo.port}
                  />
                  <InfoCard
                    icon={<Server className="w-5 h-5" />}
                    label="Server"
                    value={selectedScan.targetInfo.server}
                  />
                </div>
              </div>

              {/* Scan Timing */}
              <div className="bg-gray-800 rounded-xl p-6 shadow-xl">
                <h2 className="text-xl font-semibold mb-4">Scan Timing</h2>
                <div className="space-y-4">
                  <div className="bg-gray-900 rounded-lg p-4">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Start Time</span>
                      <span>{selectedScan.timing.startTime}</span>
                    </div>
                  </div>
                  <div className="bg-gray-900 rounded-lg p-4">
                    <div className="flex justify-between">
                      <span className="text-gray-400">End Time</span>
                      <span>{selectedScan.timing.endTime}</span>
                    </div>
                  </div>
                  <div className="bg-gray-900 rounded-lg p-4">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Duration</span>
                      <span>{selectedScan.timing.duration} seconds</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Vulnerabilities */}
            <div className="bg-gray-800 rounded-xl p-6 shadow-xl">
              <h2 className="text-xl font-semibold mb-4">Vulnerabilities</h2>
              <div className="space-y-4">
                {selectedScan.vulnerabilities.map((vuln) => (
                  <div 
                    key={vuln.id}
                    className="bg-gray-900 rounded-lg p-4"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        <span className={`px-2 py-1 rounded text-sm border ${getSeverityColor(vuln.severity)}`}>
                          {vuln.severity}
                        </span>
                        <h3 className="font-medium">{vuln.type}</h3>
                      </div>
                      <span className="text-gray-400 text-sm">{vuln.timestamp}</span>
                    </div>
                    <p className="text-gray-300 mb-3">{vuln.description}</p>
                    <div className="bg-gray-800 p-4 rounded-lg">
                      <h4 className="font-medium mb-2">Recommendation:</h4>
                      <p className="text-gray-400">{vuln.recommendation}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default VulnerabilityScanner;